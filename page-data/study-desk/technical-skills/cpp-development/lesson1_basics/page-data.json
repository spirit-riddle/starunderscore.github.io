{"componentChunkName":"component---src-templates-studydesk-template-js","path":"/study-desk/technical-skills/cpp-development/lesson1_basics/","result":{"data":{"markdownRemark":{"html":"<h1>C++ Development Guide</h1>\n<h2>Welcome to the C++ Development Guide!</h2>\n<p>This resource aims to help JavaScript developers transition to C++ by highlighting key concepts and features unique to C++. Use this glossary to familiarize yourself with the language's core terminology and paradigms.</p>\n<hr>\n<h2>Glossary of C++ Terms</h2>\n<table>\n<thead>\n<tr>\n<th><strong>Term</strong></th>\n<th><strong>Definition</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Pointer</strong></td>\n<td>A variable that stores the memory address of another variable. Pointers enable dynamic memory allocation and manipulation, a concept not directly present in JavaScript.</td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td>An alias for an existing variable, allowing it to be accessed and modified without copying. Similar to JavaScript object references but more controlled.</td>\n</tr>\n<tr>\n<td><strong>Template</strong></td>\n<td>A blueprint for creating generic classes and functions, enabling type-safe code reuse. JavaScript lacks a direct equivalent but achieves similar functionality with dynamic typing.</td>\n</tr>\n<tr>\n<td><strong>Destructor</strong></td>\n<td>A special member function that is automatically invoked when an object goes out of scope to clean up resources. JavaScript's garbage collector handles memory cleanup automatically.</td>\n</tr>\n<tr>\n<td><strong>Namespace</strong></td>\n<td>A declarative region that provides scope to identifiers, preventing name collisions. JavaScript handles this with modules or objects.</td>\n</tr>\n<tr>\n<td><strong>Overloading</strong></td>\n<td>The ability to define multiple functions with the same name but different parameters. JavaScript achieves a similar effect with optional parameters or dynamic arguments.</td>\n</tr>\n<tr>\n<td><strong>Static</strong></td>\n<td>A keyword used to define class-level variables and functions that are shared across all instances. JavaScript provides similar functionality with static methods.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>Memory Management in C++</h2>\n<p>Mastering memory management is essential for C++ development. Unlike JavaScript, where memory is automatically handled by a garbage collector, C++ gives developers direct control over memory allocation and deallocation.</p>\n<h3>Key Concepts</h3>\n<ul>\n<li>\n<p><strong>Stack vs. Heap Memory</strong>:</p>\n<ul>\n<li><strong>Stack Memory</strong>: Automatically managed, fast, but limited in size. Variables are destroyed when they go out of scope.</li>\n<li><strong>Heap Memory</strong>: Used for dynamic memory allocation. Must be manually managed using <code class=\"language-text\">new</code> and <code class=\"language-text\">delete</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Pointers</strong>: Variables that store memory addresses. They enable dynamic memory manipulation but require careful handling to avoid memory leaks.</p>\n</li>\n<li>\n<p><strong>References</strong>: Aliases for existing variables, safer than pointers. References must always point to valid data.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">new</code> and <code class=\"language-text\">delete</code></strong>: Operators for dynamic memory allocation and deallocation.</p>\n</li>\n<li>\n<p><strong>Memory Leaks</strong>: Failure to free allocated memory leads to leaks, consuming resources over time.</p>\n</li>\n<li>\n<p><strong>Smart Pointers</strong>: Modern C++ features like <code class=\"language-text\">std::unique_ptr</code> and <code class=\"language-text\">std::shared_ptr</code> that automate memory management and prevent leaks.</p>\n</li>\n</ul>\n<h3>Examples</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token comment\">// Stack Memory Example</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Allocated on the stack</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// x is automatically destroyed here</span>\n\n<span class=\"token comment\">// Heap Memory Example</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Allocated on the heap</span>\n    <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Deallocated manually</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2>Types to Memorize</h2>\n<p>C++ is a statically typed language, so understanding and memorizing types is essential.</p>\n<h3>Fundamental Types</h3>\n<ul>\n<li><code class=\"language-text\">int</code>, <code class=\"language-text\">short</code>, <code class=\"language-text\">long</code>, <code class=\"language-text\">unsigned</code></li>\n<li><code class=\"language-text\">float</code>, <code class=\"language-text\">double</code>, <code class=\"language-text\">long double</code></li>\n<li><code class=\"language-text\">char</code>, <code class=\"language-text\">wchar_t</code>, <code class=\"language-text\">bool</code></li>\n</ul>\n<h3>Derived Types</h3>\n<ul>\n<li>Pointers (<code class=\"language-text\">int*</code>)</li>\n<li>References (<code class=\"language-text\">int&amp;</code>)</li>\n<li>Arrays (<code class=\"language-text\">int arr[10];</code>)</li>\n<li>Functions (<code class=\"language-text\">int add(int a, int b);</code>)</li>\n</ul>\n<h3>User-Defined Types</h3>\n<ul>\n<li><code class=\"language-text\">struct</code>, <code class=\"language-text\">class</code>, <code class=\"language-text\">union</code>, <code class=\"language-text\">enum</code></li>\n</ul>\n<h3>Type Modifiers</h3>\n<ul>\n<li><code class=\"language-text\">const</code>, <code class=\"language-text\">volatile</code>, <code class=\"language-text\">mutable</code></li>\n</ul>\n<h3>Specialized Types</h3>\n<ul>\n<li><code class=\"language-text\">std::string</code></li>\n<li><code class=\"language-text\">std::array</code>, <code class=\"language-text\">std::vector</code>, <code class=\"language-text\">std::tuple</code></li>\n</ul>\n<h3>Modern C++ Types</h3>\n<ul>\n<li><code class=\"language-text\">auto</code>, <code class=\"language-text\">decltype</code>, <code class=\"language-text\">nullptr</code></li>\n<li><code class=\"language-text\">std::shared_ptr</code>, <code class=\"language-text\">std::unique_ptr</code></li>\n</ul>\n<hr>\n<p>By exploring these concepts and practices, you will build a strong foundation for developing in C++. Stay tuned for more guides and lessons!</p>","frontmatter":{"title":""}}},"pageContext":{"slug":"study-desk/technical-skills/cpp-development/lesson1_basics"}},"staticQueryHashes":[],"slicesMap":{}}